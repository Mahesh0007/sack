package com.ferhtaydn.common.models

import java.io.{ ByteArrayInputStream, ByteArrayOutputStream }

import com.sksamuel.avro4s._
import org.apache.avro.Schema
import org.apache.avro.generic.GenericRecord

object ProductSchema {

  //private val productSchema: Schema = new Schema.Parser().parse(getClass.getResourceAsStream("/avro/product.avsc"))
  // generate the product avro schema at compile time, after Product class is generated by sbt-avro4s.
  private lazy val productSchema = AvroSchema[Product]

  private val format = RecordFormat[Product]

  implicit val productSchemaImplicit: SchemaFor[Product] = new SchemaFor[Product] {
    override def apply(): Schema = productSchema
  }

  def productAsBytes(p: Product): Array[Byte] = {
    val baos = new ByteArrayOutputStream
    val output = AvroOutputStream.binary[Product](baos)
    output.write(p)
    output.close()
    baos.toByteArray
  }

  def productFromBytes(bytes: Array[Byte]): Product = {
    val in = new ByteArrayInputStream(bytes)
    val input = AvroInputStream.binary[Product](in)
    input.iterator.toSeq.head
  }

  def productToRecord(p: Product): GenericRecord = {
    format.to(p)
  }

  def productFromRecord(productRecord: GenericRecord): Product = {
    format.from(productRecord)
  }

}
